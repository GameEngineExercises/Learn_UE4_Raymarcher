// Licensed under MIT license - See License.txt for details.
// Special credits go to : Temaran (compute shader tutorial), TheHugeManatee (original concept, supervision) Ryan Brucks
// (original raymarching code) and tommybazar (TBRaymarcherPlugin).

// NUZEROVI (Learn UE4_Raymarcher from TBRaymarcherPlugin)

#include "RaymarchMaterialCommon.usf"
#include "WindowedSampling.usf"

// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
float4 PerformWindowedIntensityRaymarch(Texture3D DataVolume, // Data Volume 
                              float3 CurPos, float Thickness, // Position of ray entry to cube and thickness in UVW coords.
                              float StepCount, // Number of steps to take if Thickness is 1. 
                              float4 WindowingParams,
                              FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
    // StepSize in UVW is inverse to StepCount.
    float StepSize = 1 / StepCount;
    // Actual number of steps to take to march through the full thickness of the cube at the ray position.
    float FloatActualSteps = StepCount * Thickness;
    // Number of full steps to take.
    int MaxSteps = floor(FloatActualSteps);
    // Size of the last (not a full-sized) step.
    float FinalStep = frac(FloatActualSteps);
    
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);
   
    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec; // Because we jitter only "against" the direction of LocalCamVec, start marching before first sample.
        
        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        }else
        {
            float DataValue = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;

            // WindowingParams.x == Center, WindowingParams.y = Width
            float TFPos = clamp(GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y), 0, 1);

            return float4(TFPos, TFPos, TFPos, 1);
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
       
        float DataValue = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, CurPos, 0).r;

        // WindowingParams.x == Center, WindowingParams.y = Width
        float TFPos = clamp(GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y), 0, 1);

        return float4(TFPos, TFPos, TFPos, 1);
       
    }
    
    // Didn't hit anything
    return float4(0.0, 0.0, 0.0, 0.0);
}